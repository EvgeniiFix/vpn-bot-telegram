import logging
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from app.v2ray_config import generate_v2ray_config
from app.payments import create_payment_link
from app.database import add_user, save_payment_label, get_user_subscription, add_subscription, delete_subscription
from app.keyboards import (
    get_main_inline_keyboard,
    get_welcome_inline_keyboard,
    get_subscription_inline_keyboard,
    get_servers_inline_keyboard
)

logger = logging.getLogger(__name__)
router = Router()


class BuyFlow(StatesGroup):
    choosing_duration = State()
    choosing_server = State()


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_new_user = add_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        reg_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    )

    if is_new_user:
        # –¢–û–õ–¨–ö–û –ù–û–í–´–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        start_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        end_date = (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d %H:%M:%S")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        add_subscription(user_id, "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", start_date, end_date)

        await message.answer(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ë–ï–°–ü–õ–ê–¢–ù–´–ô —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è!</b>\n\n"
            "üåê <b>–î–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä:</b> üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è\n"
            "‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 3 –¥–Ω—è\n"
            "üìÖ <b>–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:</b> " + end_date + "\n\n"
                                                 "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN üî•",
            parse_mode="HTML",
            reply_markup=get_welcome_inline_keyboard()
        )

        logger.info(f"üéÅ –í—ã–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ù–û–í–û–ú–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        existing_sub = get_user_subscription(user_id)

        if existing_sub:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            await message.answer(
                "–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è üåç\n üîí–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º VPN –ª–µ–≥–∫–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ",
                parse_mode="HTML",
                reply_markup=get_main_inline_keyboard(),
                disable_web_page_preview=True
            )
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å
            await message.answer(
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! ‚ù§Ô∏è\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n"
                "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN üî•",
                parse_mode="HTML",
                reply_markup=get_main_inline_keyboard(),
                disable_web_page_preview=True
            )


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN",
        reply_markup=get_main_inline_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "buy_access")
async def buy_access_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BuyFlow.choosing_duration)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_subscription_inline_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("sub_"))
async def duration_selected_handler(callback: CallbackQuery, state: FSMContext):
    duration_map = {
        "sub_1month": "1 –º–µ—Å—è—Ü ‚Äî 150 ‚ÇΩ",
        "sub_3month": "3 –º–µ—Å—è—Ü–∞ ‚Äî 430 ‚ÇΩ",
        "sub_6month": "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 850 ‚ÇΩ"
    }

    duration = duration_map.get(callback.data)
    if duration:
        await state.update_data(duration=duration)
        await state.set_state(BuyFlow.choosing_server)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=get_servers_inline_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BuyFlow.choosing_duration)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_subscription_inline_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("server_"))
async def server_selected_handler(callback: CallbackQuery, state: FSMContext):
    server_map = {
        "server_germany": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è"
    }

    server = server_map.get(callback.data)
    if server:
        user_data = await state.get_data()
        duration = user_data.get("duration")

        # –¶–µ–Ω—ã
        prices = {
            "1 –º–µ—Å—è—Ü ‚Äî 150 ‚ÇΩ": (150, 30),
            "3 –º–µ—Å—è—Ü–∞ ‚Äî 430 ‚ÇΩ": (430, 90),
            "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 850 ‚ÇΩ": (850, 180)
        }

        amount, days = prices[duration]

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        link, label = create_payment_link(
            user_id=callback.from_user.id,
            duration=duration,
            server=server,
            amount=amount
        )

        if link:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            save_payment_label(
                user_id=callback.from_user.id,
                label=label,
                server=server,
                amount=amount,
                days=days,
                status="pending"
            )

            await callback.message.edit_text(
                f"‚úÖ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
                f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {duration}\n"
                f"üåê <b>–°–µ—Ä–≤–µ—Ä:</b> {server}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount} ‚ÇΩ\n\n"
                f"‚û°Ô∏è <a href='{link}'>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
                    ]
                )
            )
    await callback.answer()


@router.callback_query(F.data == "show_server")
async def show_server_handler(callback: CallbackQuery):
    subscription = get_user_subscription(callback.from_user.id)

    if subscription:
        server = subscription.get('server')
        end_date = subscription.get('end_date')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config_link = generate_v2ray_config(callback.from_user.id, server)

        if config_link:
            await callback.message.answer(
                f"<b>üåê –í–∞—à –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô VPN —Å–µ—Ä–≤–µ—Ä</b>\n\n"
                f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server}\n"
                f"<b>–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:</b> {end_date}\n\n"
                f"<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥:</b>\n"
                f"<code>{config_link}</code>\n\n"
                f"üìã –≠—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å!",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_access")]
                ]
            ),
            parse_mode="HTML"
        )
    await callback.answer()


@router.callback_query(F.data == "instructions")
async def instructions_handler(callback: CallbackQuery):
    await callback.message.answer(
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>V2RayBox</b>\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>+</b> (–¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ <b>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å v2ray URI –∏–∑ –±—É—Ñ–µ—Ä–∞</b>\n"
        "4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤–∞—à —Å–µ—Ä–≤–µ—Ä\n"
        "5. –ù–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>\n\n"
        "‚ö° <b>–ì–æ—Ç–æ–≤–æ! VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>",
        parse_mode="HTML"
    )
    await callback.answer()
