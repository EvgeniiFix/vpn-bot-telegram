import asyncio
import socket
import logging
from aiohttp import web, TCPConnector
from aiogram import Bot, Dispatcher

from app.database import init_db, get_payment_by_label, add_subscription, update_payment_status
from app.handlers import router
from app.admin_panel import admin_router
from app.config import BOT_TOKEN
from app.payments import check_pending_payments_task
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def activate_subscription(user_id, label, server, days):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.database import get_user_subscription, delete_subscription

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_sub = get_user_subscription(user_id)
        if existing_sub:
            delete_subscription(user_id)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        start_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        end_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        add_subscription(user_id, server, start_date, end_date)
        update_payment_status(label, "success")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(
            user_id,
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"üìÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: {end_date}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )

        logger.info(f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, —Å–µ—Ä–≤–µ—Ä: {server}, –¥–Ω–µ–π: {days}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


async def cancel_subscription(user_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.database import delete_subscription
        delete_subscription(user_id)
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ÆKassa ---
async def handle_yookassa_webhook(request: web.Request):
    """
    –≠—Ç–æ—Ç endpoint –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ÆKassa
    """
    try:
        # –ÆKassa –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON
        data = await request.json()
        logger.info("üîÑ –ü—Ä–∏—à—ë–ª webhook –æ—Ç –ÆKassa: %s", data)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not data.get('event') or not data.get('object'):
            logger.warning("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –æ—Ç –ÆKassa: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return web.Response(text="OK", status=200)

        event = data.get('event')
        payment_object = data.get('object')

        if event == 'payment.waiting_for_capture':
            # –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            payment_id = payment_object.get('id')
            logger.info(f"‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_id}")

        elif event == 'payment.succeeded':
            # –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!
            payment_id = payment_object.get('id')
            amount = payment_object.get('amount', {}).get('value')
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')

            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω: {payment_id} –¥–ª—è user_id={user_id}, —Å—É–º–º–∞: {amount}")

            # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
            label = f"yk_{payment_id}"
            payment_data = get_payment_by_label(label)

            if payment_data and payment_data['status'] == "pending":
                user_id_db = payment_data['user_id']
                server = payment_data['server']
                days = payment_data['days']

                await activate_subscription(user_id_db, label, server, days)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {label}")

        elif event == 'payment.canceled':
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            payment_id = payment_object.get('id')
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')

            logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {payment_id} –¥–ª—è user_id={user_id}")

            label = f"yk_{payment_id}"
            update_payment_status(label, "failed")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ
            if user_id:
                try:
                    bot = Bot(token=BOT_TOKEN)
                    await bot.send_message(
                        user_id,
                        "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        elif event == 'refund.succeeded':
            # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
            payment_id = payment_object.get('id')
            logger.info(f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: {payment_id}")

            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
            metadata = payment_object.get('metadata', {})
            user_id = metadata.get('user_id')
            if user_id:
                await cancel_subscription(user_id)

        else:
            logger.info(f"‚ÑπÔ∏è –ù–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –ÆKassa: {event}")

        return web.Response(text="OK", status=200)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook –ÆKassa: {e}")
        return web.Response(text="OK", status=200)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ÆMoney (—Ä–µ–∑–µ—Ä–≤) ---
async def handle_yoomoney_webhook(request: web.Request):
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–π endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆMoney
    """
    try:
        data = await request.post()
        logger.info("üîÑ –ü—Ä–∏—à—ë–ª callback –æ—Ç –ÆMoney: %s", dict(data))

        notification_type = data.get('notification_type')
        label = data.get('label')

        if notification_type == 'p2p-incoming':
            payment_data = get_payment_by_label(label)
            if payment_data and payment_data['status'] == "pending":
                user_id = payment_data['user_id']
                server = payment_data['server']
                days = payment_data['days']
                await activate_subscription(user_id, label, server, days)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ÆMoney –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {label}")

        return web.Response(text="OK")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ÆMoney: {e}")
        return web.Response(text="OK")


# --- aiohttp —Å–µ—Ä–≤–µ—Ä ---
async def start_web_server():
    app = web.Application()

    # Webhook –¥–ª—è –ÆKassa (–æ—Å–Ω–æ–≤–Ω–æ–π)
    app.router.add_post("/yookassa", handle_yookassa_webhook)

    # Webhook –¥–ª—è –ÆMoney (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    app.router.add_post("/yoomoney", handle_yoomoney_webhook)

    runner = web.AppRunner(app)
    await runner.setup()

    # üü¢ —Å–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É (8080)
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    logger.info("üåê Web-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    logger.info("üìù Webhook URLs:")
    logger.info("   - –ÆKassa: https://vbkvpn.online/yookassa")
    logger.info("   - –ÆMoney: https://vbkvpn.online/yoomoney")


# --- Telegram –±–æ—Ç ---
async def start_bot():
    connector = TCPConnector(family=socket.AF_INET)
    bot = Bot(token=BOT_TOKEN, connector=connector)
    dp = Dispatcher()

    dp.include_router(router)
    dp.include_router(admin_router)

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)


# --- –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from app.database import check_and_fix_database
        init_db()
        check_and_fix_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        payment_checker_task = asyncio.create_task(check_pending_payments_task())

        await asyncio.gather(
            start_bot(),
            start_web_server()
        )
    except KeyboardInterrupt:
        logger.info("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîö –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
