import sqlite3
import logging
from datetime import datetime, timedelta
from contextlib import contextmanager

logger = logging.getLogger(__name__)


@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("vpn_bot.db")
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        conn.close()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with get_db_connection() as conn:
        cur = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            reg_date TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        cur.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            server TEXT NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cur.execute("""
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            label TEXT UNIQUE NOT NULL,
            server TEXT NOT NULL,
            amount INTEGER NOT NULL,
            days INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            created_date TEXT NOT NULL,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
        )
        """)
        cur.execute("""
               CREATE TABLE IF NOT EXISTS user_configs (
                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER NOT NULL,
                   server_name TEXT NOT NULL,
                   uuid TEXT NOT NULL,
                   created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                   UNIQUE(user_id, server_name)
               )
               """)

        # –ò–Ω–¥–µ–∫—Å—ã
        cur.execute("CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_subscriptions_status ON subscriptions(status)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_payments_label ON payments(label)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)")

        conn.commit()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def check_and_fix_database():
    with get_db_connection() as conn:
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –≤ subscriptions
            cursor.execute("PRAGMA table_info(subscriptions)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'status' not in columns:
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –∫–æ–ª–æ–Ω–∫–∞ status –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                logger.info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É status...")
                cursor.execute("ALTER TABLE subscriptions ADD COLUMN status TEXT DEFAULT 'active'")
                cursor.execute("UPDATE subscriptions SET status = 'active' WHERE status IS NULL")
                conn.commit()
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É subscriptions")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
            raise


def add_user(user_id, username, first_name, reg_date):
    
    with get_db_connection() as conn:
        cur = conn.cursor()

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                INSERT OR IGNORE INTO users (user_id, username, first_name, reg_date)
                VALUES (?, ?, ?, ?)
            """, (user_id, username, first_name, reg_date))

            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if cur.rowcount > 0:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user_id={user_id}, username={username}")
                return True
            else:
                logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: user_id={user_id}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            conn.rollback()
            return False


def add_subscription(user_id, server, start_date, end_date):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO subscriptions (user_id, server, start_date, end_date)
            VALUES (?, ?, ?, ?)
        """, (user_id, server, start_date, end_date))
        conn.commit()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: user_id={user_id}, server={server}, –¥–æ {end_date}")


def get_user_subscription(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM subscriptions 
            WHERE user_id = ? AND status = 'active' AND end_date > datetime('now')
            ORDER BY id DESC LIMIT 1
        """, (user_id,))
        subscription = cursor.fetchone()
        return dict(subscription) if subscription else None


def save_payment_label(user_id, label, server, amount, days, status="pending"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO payments (user_id, label, server, amount, days, status, created_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user_id, label, server, amount, days, status, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
        logger.info(f"üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂: label={label}, user_id={user_id}, amount={amount}")


def update_payment_status(label, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE payments 
            SET status = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE label = ?
        """, (status, label))
        conn.commit()
        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: label={label}, status={status}")


def get_payment_by_label(label):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ label"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM payments WHERE label = ?", (label,))
        payment = cursor.fetchone()
        return dict(payment) if payment else None


def get_pending_payments():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM payments WHERE status = 'pending'")
        payments = cursor.fetchall()
        return [dict(payment) for payment in payments]


def delete_subscription(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM subscriptions WHERE user_id = ?", (user_id,))
        conn.commit()
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}")


def get_expired_subscriptions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM subscriptions 
            WHERE status = 'active' AND end_date <= datetime('now')
        """)
        subscriptions = cursor.fetchall()
        return [dict(sub) for sub in subscriptions]


def get_user_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with get_db_connection() as conn:
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM subscriptions WHERE status = 'active' AND end_date > datetime('now')")
        active_subscriptions = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM payments WHERE status = 'success'")
        successful_payments = cursor.fetchone()[0]

        cursor.execute("SELECT SUM(amount) FROM payments WHERE status = 'success'")
        total_revenue = cursor.fetchone()[0] or 0

        return {
            'total_users': total_users,
            'active_subscriptions': active_subscriptions,
            'successful_payments': successful_payments,
            'total_revenue': total_revenue
        }
