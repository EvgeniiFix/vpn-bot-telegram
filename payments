import uuid
import asyncio
import logging
from yookassa import Configuration, Payment
from app.config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
from app.database import get_pending_payments, update_payment_status, add_subscription
from datetime import datetime, timedelta
from aiogram import Bot
from app.config import BOT_TOKEN

logger = logging.getLogger(__name__)


Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

def create_payment_link(user_id: int, duration: str, server: str, amount: int):
    try:
        idempotence_key = str(uuid.uuid4())

        payment_data = {
            "amount": {"value": f"{amount}.00", "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://t.me/bvkvpnbot"},
            "capture": True,
            "description": f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ ({duration}, {server})",
            "metadata": {"user_id": user_id, "duration": duration, "server": server},
            "receipt": {
                "customer": {"email": "user@example.com"},  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                "items": [
                    {
                        "description": f"VPN –ø–æ–¥–ø–∏—Å–∫–∞: {duration}",
                        "quantity": "1",
                        "amount": {"value": f"{amount}.00", "currency": "RUB"},
                        "vat_code": "1",  # –ù–î–° 20%
                        "payment_mode": "full_payment",
                        "payment_subject": "service"
                    }
                ]
            }
        }

        payment = Payment.create(payment_data, idempotence_key)

        label = f"yk_{payment.id}"
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {payment.id} –¥–ª—è user_id={user_id}")

        return payment.confirmation.confirmation_url, label

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None, None

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
async def check_pending_payments_task():
    
    while True:
        try:
            await check_yookassa_payments()
            await asyncio.sleep(30)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await asyncio.sleep(60)

async def check_yookassa_payments():
    """—Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π""
    pending_payments = get_pending_payments()

    for payment in pending_payments:
        if payment['label'].startswith('yk_') and payment['status'] == "pending":
            payment_id = payment['label'][3:]

            try:
                payment_info = Payment.find_one(payment_id)

                if payment_info.status == 'succeeded':
                    logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {payment_id}")
                    await activate_subscription(
                        payment['user_id'],
                        payment['label'],
                        payment['server'],
                        payment['days']
                    )
                elif payment_info.status == 'canceled':
                    logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {payment_id}")
                    update_payment_status(payment['label'], 'failed')

            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")

async def activate_subscription(user_id, label, server, days):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.database import get_user_subscription, delete_subscription

        # –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_sub = get_user_subscription(user_id)
        if existing_sub:
            delete_subscription(user_id)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        start_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        end_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        add_subscription(user_id, server, start_date, end_date)
        update_payment_status(label, "success")


        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(
            user_id,
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üåê <b>–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:</b> {server}\n"
            f"üìÖ <b>–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:</b> {end_date}\n\n"
            f"–°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )

        logger.info(f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, —Å–µ—Ä–≤–µ—Ä: {server}, –¥–Ω–µ–π: {days}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
