from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import sqlite3
from app.config import ADMIN_ID

admin_router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ ===
@admin_router.message(Command("stats"))
async def stats_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    from app.database import get_user_stats
    stats = get_user_stats()

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {stats['active_subscriptions']}\n"
        f"üí∞ <b>–£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:</b> {stats['successful_payments']}\n"
        f"üíµ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {stats['total_revenue']} ‚ÇΩ",
        parse_mode="HTML"
    )

# === –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@admin_router.message(Command("users"))
async def users_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    conn = sqlite3.connect("vpn_bot.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT user_id, username, first_name, reg_date 
        FROM users 
        ORDER BY id DESC 
        LIMIT 20
    """)
    users = cursor.fetchall()

    conn.close()

    if not users:
        await message.answer("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    users_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        user_id, username, first_name, reg_date = user
        username = username if username else "–ù–µ—Ç username"
        users_text += f"üë§ {first_name} (@{username})\n"
        users_text += f"üÜî ID: {user_id}\n"
        users_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
        users_text += "‚îÄ" * 20 + "\n"

    await message.answer(users_text, parse_mode="HTML")

# === –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ ===
@admin_router.message(Command("subs"))
async def subscriptions_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    conn = sqlite3.connect("vpn_bot.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT s.user_id, u.username, u.first_name, s.server, s.start_date, s.end_date 
        FROM subscriptions s
        LEFT JOIN users u ON s.user_id = u.user_id
        WHERE s.status = 'active' AND s.end_date > datetime('now')
        ORDER BY s.id DESC 
        LIMIT 20
    """)
    subscriptions = cursor.fetchall()

    conn.close()

    if not subscriptions:
        await message.answer("üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç")
        return

    subs_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n"
    for sub in subscriptions:
        user_id, username, first_name, server, start_date, end_date = sub
        username = username if username else "–ù–µ—Ç username"
        subs_text += f"üë§ {first_name} (@{username})\n"
        subs_text += f"üÜî ID: {user_id}\n"
        subs_text += f"üåê –°–µ—Ä–≤–µ—Ä: {server}\n"
        subs_text += f"üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
        subs_text += f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
        subs_text += "‚îÄ" * 20 + "\n"

    await message.answer(subs_text, parse_mode="HTML")

# === –ü–ª–∞—Ç–µ–∂–∏ ===
@admin_router.message(Command("payments"))
async def payments_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    conn = sqlite3.connect("vpn_bot.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT p.user_id, u.username, u.first_name, p.amount, p.status, p.created_date, p.label 
        FROM payments p
        LEFT JOIN users u ON p.user_id = u.user_id
        ORDER BY p.id DESC 
        LIMIT 20
    """)
    payments = cursor.fetchall()

    conn.close()

    if not payments:
        await message.answer("üìù –ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    payments_text = "üí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n\n"
    for payment in payments:
        user_id, username, first_name, amount, status, created_date, label = payment
        username = username if username else "–ù–µ—Ç username"
        status_icon = "‚úÖ" if status == "success" else "‚è≥" if status == "pending" else "‚ùå"

        payments_text += f"üë§ {first_name} (@{username})\n"
        payments_text += f"üÜî ID: {user_id}\n"
        payments_text += f"üíµ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        payments_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_icon} {status}\n"
        payments_text += f"üìÖ –î–∞—Ç–∞: {created_date}\n"
        payments_text += f"üè∑Ô∏è Label: {label}\n"
        payments_text += "‚îÄ" * 20 + "\n"

    await message.answer(payments_text, parse_mode="HTML")

# === –†–∞—Å—Å—ã–ª–∫–∞ ===
@admin_router.message(Command("broadcast"))
async def broadcast_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    broadcast_text = message.text.replace('/broadcast', '').strip()

    if not broadcast_text:
        await message.answer("‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/broadcast –≤–∞—à —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", parse_mode="HTML")
        return

    conn = sqlite3.connect("vpn_bot.db")
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()

    total_users = len(users)
    successful = 0
    failed = 0

    status_msg = await message.answer(f"üì¢ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{total_users}", parse_mode="HTML")

    from aiogram import Bot
    from app.config import BOT_TOKEN
    bot = Bot(token=BOT_TOKEN)

    for i, (user_id,) in enumerate(users, 1):
        try:
            await bot.send_message(user_id, broadcast_text)
            successful += 1
        except Exception as e:
            failed += 1
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if i % 10 == 0 or i == total_users:
            await status_msg.edit_text(
                f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed}",
                parse_mode="HTML"
            )

    await message.answer(
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}",
        parse_mode="HTML"
    )

# === –ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
@admin_router.message(Command("admin"))
async def admin_help_handler(message: Message):
    if not is_admin(message.from_user.id):
        return

    help_text = (
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å VPN –±–æ—Ç–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìä <b>/stats</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "üë• <b>/users</b> - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üîî <b>/subs</b> - –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "üí∞ <b>/payments</b> - –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "üì¢ <b>/broadcast</b> - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "üõ†Ô∏è <b>/admin</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "<code>/broadcast –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ë–æ—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≤—Ç—Ä–∞ —Å 03:00 –¥–æ 04:00</code>"
    )

    await message.answer(help_text, parse_mode="HTML")
